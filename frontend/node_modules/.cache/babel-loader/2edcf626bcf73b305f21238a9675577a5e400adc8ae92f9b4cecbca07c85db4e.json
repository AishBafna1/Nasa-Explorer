{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/EPICImages.js\",\n  _s = $RefreshSig$();\n// src/pages/EPICImages.js\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Import the Navbar component\nimport './EPICImages.css'; // Add a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EPICImages() {\n  _s();\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch EPIC images\n  const fetchEPICImages = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json();\n      setEpicImages(data); // Set the fetched data to state\n    } catch (error) {\n      setError(error); // Set error state if fetch fails\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch EPIC images on component mount\n  useEffect(() => {\n    fetchEPICImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"epic-images-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EPIC Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-images-grid\",\n      children: epicImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"epic-image-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://epic.gsfc.nasa.gov/archive/natural/${image.date.split(' ')[0]}/jpg/${image.image}.jpg`,\n          alt: image.caption,\n          className: \"epic-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: image.caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, image.identifier, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(EPICImages, \"mYvgWJ04eFnUsIUk+XHbeN4SEPs=\");\n_c = EPICImages;\nexport default EPICImages;\nvar _c;\n$RefreshReg$(_c, \"EPICImages\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","jsxDEV","_jsxDEV","EPICImages","_s","epicImages","setEpicImages","loading","setLoading","error","setError","fetchEPICImages","response","fetch","data","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","map","image","src","date","split","alt","caption","identifier","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/EPICImages.js"],"sourcesContent":["// src/pages/EPICImages.js\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Import the Navbar component\nimport './EPICImages.css'; // Add a CSS file for styling\n\nfunction EPICImages() {\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch EPIC images\n  const fetchEPICImages = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json();\n      setEpicImages(data); // Set the fetched data to state\n    } catch (error) {\n      setError(error); // Set error state if fetch fails\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch EPIC images on component mount\n  useEffect(() => {\n    fetchEPICImages();\n  }, []);\n\n  return (\n    <div className=\"epic-images-container\">\n      <Navbar /> {/* Include the Navbar */}\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n      \n      <h1>EPIC Images</h1>\n      <div className=\"epic-images-grid\">\n        {epicImages.map((image) => (\n          <div key={image.identifier} className=\"epic-image-item\">\n            <img \n              src={`https://epic.gsfc.nasa.gov/archive/natural/${image.date.split(' ')[0]}/jpg/${image.image}.jpg`} \n              alt={image.caption} \n              className=\"epic-image\" \n            />\n            <p>{image.caption}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default EPICImages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}