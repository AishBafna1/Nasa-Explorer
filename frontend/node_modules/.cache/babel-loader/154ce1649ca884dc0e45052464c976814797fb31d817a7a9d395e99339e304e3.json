{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/components/MyChart.js\",\n  _s = $RefreshSig$();\n// src/components/MyChart.js\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\n// Register all Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst MyChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null); // Store the chart instance\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n\n    // Destroy existing chart instance if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Create a new chart instance\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'bar',\n      // Change this to your desired chart type (e.g., 'line', 'bar', etc.)\n      data: data,\n      options: {\n        scales: {\n          x: {\n            type: 'category',\n            // Use 'category' scale\n            title: {\n              display: true,\n              text: 'Categories'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Values'\n            }\n          }\n        }\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data]); // Recreate chart only when data changes\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n_s(MyChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = MyChart;\nexport default MyChart;\nvar _c;\n$RefreshReg$(_c, \"MyChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","registerables","jsxDEV","_jsxDEV","register","MyChart","data","_s","chartRef","chartInstanceRef","ctx","current","getContext","destroy","type","options","scales","x","title","display","text","y","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/components/MyChart.js"],"sourcesContent":["// src/components/MyChart.js\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\n// Register all Chart.js components\nChart.register(...registerables);\n\nconst MyChart = ({ data }) => {\n    const chartRef = useRef(null);\n    const chartInstanceRef = useRef(null); // Store the chart instance\n\n    useEffect(() => {\n        const ctx = chartRef.current.getContext('2d');\n\n        // Destroy existing chart instance if it exists\n        if (chartInstanceRef.current) {\n            chartInstanceRef.current.destroy();\n        }\n\n        // Create a new chart instance\n        chartInstanceRef.current = new Chart(ctx, {\n            type: 'bar', // Change this to your desired chart type (e.g., 'line', 'bar', etc.)\n            data: data,\n            options: {\n                scales: {\n                    x: {\n                        type: 'category', // Use 'category' scale\n                        title: {\n                            display: true,\n                            text: 'Categories',\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Values',\n                        },\n                    },\n                },\n            },\n        });\n\n        // Cleanup on component unmount\n        return () => {\n            if (chartInstanceRef.current) {\n                chartInstanceRef.current.destroy();\n            }\n        };\n    }, [data]); // Recreate chart only when data changes\n\n    return <canvas ref={chartRef} />;\n};\n\nexport default MyChart;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,gBAAgB,GAAGV,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEvCD,SAAS,CAAC,MAAM;IACZ,MAAMY,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,IAAIH,gBAAgB,CAACE,OAAO,EAAE;MAC1BF,gBAAgB,CAACE,OAAO,CAACE,OAAO,CAAC,CAAC;IACtC;;IAEA;IACAJ,gBAAgB,CAACE,OAAO,GAAG,IAAIX,KAAK,CAACU,GAAG,EAAE;MACtCI,IAAI,EAAE,KAAK;MAAE;MACbR,IAAI,EAAEA,IAAI;MACVS,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCH,IAAI,EAAE,UAAU;YAAE;YAClBI,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV;UACJ,CAAC;UACDC,CAAC,EAAE;YACCH,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIX,gBAAgB,CAACE,OAAO,EAAE;QAC1BF,gBAAgB,CAACE,OAAO,CAACE,OAAO,CAAC,CAAC;MACtC;IACJ,CAAC;EACL,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBAAOH,OAAA;IAAQmB,GAAG,EAAEd;EAAS;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpC,CAAC;AAACnB,EAAA,CA5CIF,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AA8Cb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}