{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    setLoading(true); // Set loading state before fetching\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json(); // Parse the response as JSON\n      console.log('EPIC Images Data:', data); // Log the fetched data to the console\n\n      // Check if the response has data and is an array\n      if (data && Array.isArray(data)) {\n        setEpicImages(data); // Set the state to the array of images\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty if unexpected structure\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error); // Log any errors\n      setError(error); // Set the error state\n    } finally {\n      setLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  // Call the fetch function when the component mounts\n  useEffect(() => {\n    fetchEpicImages(); // Call the function to fetch EPIC images\n  }, []); // Dependency array should be empty for one-time fetch on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NASA Data Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Earth Polychromatic Imaging Camera (EPIC) Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), epicImages.length > 0 ? epicImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://epic.gsfc.nasa.gov/archive/natural/${image.date.slice(0, 10)}/jpg/${image.image}.jpg`,\n          alt: `EPIC ${image.identifier}`,\n          style: {\n            width: '100%',\n            height: 'auto'\n          } // Responsive images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: image.caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), \" \"]\n      }, image.identifier, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No EPIC images available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mYvgWJ04eFnUsIUk+XHbeN4SEPs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","epicImages","setEpicImages","loading","setLoading","error","setError","fetchEpicImages","response","fetch","data","json","console","log","Array","isArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","length","map","image","src","date","slice","alt","identifier","style","width","height","caption","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    setLoading(true); // Set loading state before fetching\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json(); // Parse the response as JSON\n      console.log('EPIC Images Data:', data); // Log the fetched data to the console\n\n      // Check if the response has data and is an array\n      if (data && Array.isArray(data)) {\n        setEpicImages(data); // Set the state to the array of images\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty if unexpected structure\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error); // Log any errors\n      setError(error); // Set the error state\n    } finally {\n      setLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  // Call the fetch function when the component mounts\n  useEffect(() => {\n    fetchEpicImages(); // Call the function to fetch EPIC images\n  }, []); // Dependency array should be empty for one-time fetch on mount\n\n  return (\n    <div className=\"App\">\n      <h1>NASA Data Explorer</h1>\n      \n      {/* Display loading indicator */}\n      {loading && <div className=\"spinner\">Loading...</div>}\n      \n      {/* Display error message if there is an error */}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      {/* EPIC Images Section */}\n      <div className=\"epic-images\">\n        <h2>Earth Polychromatic Imaging Camera (EPIC) Images</h2>\n        {epicImages.length > 0 ? (\n          epicImages.map((image) => (\n            <div key={image.identifier}>\n              <img \n                src={`https://epic.gsfc.nasa.gov/archive/natural/${image.date.slice(0, 10)}/jpg/${image.image}.jpg`} \n                alt={`EPIC ${image.identifier}`} \n                style={{ width: '100%', height: 'auto' }} // Responsive images\n              />\n              <p>{image.caption}</p> {/* Use the correct caption for each image */}\n            </div>\n          ))\n        ) : (\n          <p>No EPIC images available.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}