{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/EPICImages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar';\nimport './EPICImages.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EPICImages() {\n  _s();\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchEPICImages = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/epic');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('EPIC Images Data:', data);\n\n      // Check if the received data is an array\n      if (Array.isArray(data)) {\n        setEpicImages(data);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty array if unexpected\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error);\n      setError(error); // Log and set error\n    } finally {\n      setLoading(false); // Ensure loading state is reset\n    }\n  };\n  useEffect(() => {\n    fetchEPICImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"epic-images-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EPIC Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-images-grid\",\n      children: epicImages.map(image => {\n        // Extracting date parts (year, month, day)\n        const dateParts = image.date.split(' ')[0].split('-');\n        const [year, month, day] = dateParts;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"epic-image-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/jpg/${image.image}.jpg`,\n            alt: image.caption,\n            className: \"epic-image\",\n            onError: e => {\n              e.target.onerror = null;\n              e.target.src = \"fallback-image-url.jpg\";\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: image.caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 18\n            }, this), \" \", image.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, image.identifier, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(EPICImages, \"mYvgWJ04eFnUsIUk+XHbeN4SEPs=\");\n_c = EPICImages;\nexport default EPICImages;\nvar _c;\n$RefreshReg$(_c, \"EPICImages\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","jsxDEV","_jsxDEV","EPICImages","_s","epicImages","setEpicImages","loading","setLoading","error","setError","fetchEPICImages","response","fetch","ok","Error","data","json","console","log","Array","isArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","map","image","dateParts","date","split","year","month","day","src","alt","caption","onError","e","target","onerror","identifier","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/EPICImages.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; \nimport './EPICImages.css'; \n\nfunction EPICImages() {\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchEPICImages = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/epic'); \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('EPIC Images Data:', data);\n\n      // Check if the received data is an array\n      if (Array.isArray(data)) {\n        setEpicImages(data);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty array if unexpected\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error);\n      setError(error); // Log and set error\n    } finally {\n      setLoading(false); // Ensure loading state is reset\n    }\n  };\n\n  useEffect(() => {\n    fetchEPICImages(); \n  }, []);\n\n  return (\n    <div className=\"epic-images-container\">\n      <Navbar /> \n\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      <h1>EPIC Images</h1>\n      <div className=\"epic-images-grid\">\n        {epicImages.map((image) => {\n          // Extracting date parts (year, month, day)\n          const dateParts = image.date.split(' ')[0].split('-');\n          const [year, month, day] = dateParts;\n\n          return (\n            <div key={image.identifier} className=\"epic-image-item\">\n              <img\n                src={`https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/jpg/${image.image}.jpg`}\n                alt={image.caption}\n                className=\"epic-image\"\n                onError={(e) => { e.target.onerror = null; e.target.src=\"fallback-image-url.jpg\"; }}\n              />\n              <p>{image.caption}</p>\n              <p><strong>Date:</strong> {image.date}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default EPICImages;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,CAAC;MACzC,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;;MAEtC;MACA,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;QACvBV,aAAa,CAACU,IAAI,CAAC;MACrB,CAAC,MAAM;QACLE,OAAO,CAACT,KAAK,CAAC,4BAA4B,EAAEO,IAAI,CAAC;QACjDV,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;MACrB;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;IACnB,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACda,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKoB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCrB,OAAA,CAACF,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAETpB,OAAO,iBAAIL,OAAA;MAAKoB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACpDlB,KAAK,iBAAIP,OAAA;MAAGoB,SAAS,EAAC,OAAO;MAAAC,QAAA,GAAC,uBAAqB,EAACd,KAAK,CAACmB,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEvEzB,OAAA;MAAAqB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBzB,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BlB,UAAU,CAACwB,GAAG,CAAEC,KAAK,IAAK;QACzB;QACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;QACrD,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGL,SAAS;QAEpC,oBACE7B,OAAA;UAA4BoB,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBACrDrB,OAAA;YACEmC,GAAG,EAAE,8CAA8CH,IAAI,IAAIC,KAAK,IAAIC,GAAG,QAAQN,KAAK,CAACA,KAAK,MAAO;YACjGQ,GAAG,EAAER,KAAK,CAACS,OAAQ;YACnBjB,SAAS,EAAC,YAAY;YACtBkB,OAAO,EAAGC,CAAC,IAAK;cAAEA,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;cAAEF,CAAC,CAACC,MAAM,CAACL,GAAG,GAAC,wBAAwB;YAAE;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrF,CAAC,eACFzB,OAAA;YAAAqB,QAAA,EAAIO,KAAK,CAACS;UAAO;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtBzB,OAAA;YAAAqB,QAAA,gBAAGrB,OAAA;cAAAqB,QAAA,EAAQ;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACG,KAAK,CAACE,IAAI;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GARlCG,KAAK,CAACc,UAAU;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASrB,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACvB,EAAA,CAhEQD,UAAU;AAAA0C,EAAA,GAAV1C,UAAU;AAkEnB,eAAeA,UAAU;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}