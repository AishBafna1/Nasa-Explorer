{"ast":null,"code":"import React,{useEffect,useState}from'react';import Navbar from'../components/Navbar';// Include the Navbar\nimport'./EPICImages.css';// Ensure you have the EPIC Images styles\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function EPICImages(){const[epicImages,setEpicImages]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Fetch EPIC images from the API\nconst fetchEPICImages=async()=>{setLoading(true);// Set loading state before fetching\ntry{const response=await fetch('/api/epic');// Fetch data from your backend\nconst data=await response.json();// Parse the response as JSON\nconsole.log('EPIC Images Data:',data);// Log the fetched data\nif(data&&Array.isArray(data)){setEpicImages(data);// Set the state to the array of images\n}else{console.error('Unexpected data structure:',data);setEpicImages([]);// Set to empty if unexpected structure\n}}catch(error){console.error('Error fetching EPIC images:',error);// Log any errors\nsetError(error);// Set the error state\n}finally{setLoading(false);// Set loading to false after fetching\n}};// Call the fetch function when the component mounts\nuseEffect(()=>{fetchEPICImages();// Call the function to fetch EPIC images\n},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"epic-images-container\",children:[/*#__PURE__*/_jsx(Navbar,{}),\" \",loading&&/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",children:\"Loading...\"}),error&&/*#__PURE__*/_jsxs(\"p\",{className:\"error\",children:[\"Error fetching data: \",error.message]}),/*#__PURE__*/_jsx(\"h1\",{children:\"EPIC Images\"}),/*#__PURE__*/_jsx(\"div\",{className:\"epic-images-grid\",children:epicImages.map(image=>{// Extracting date parts (year, month, day)\nconst dateParts=image.date.split(' ')[0].split('-');const[year,month,day]=dateParts;return/*#__PURE__*/_jsxs(\"div\",{className:\"epic-image-item\",children:[/*#__PURE__*/_jsx(\"img\",{src:`https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/jpg/${image.image}.jpg`,alt:image.caption,className:\"epic-image\"}),/*#__PURE__*/_jsx(\"p\",{children:image.caption}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Date:\"}),\" \",image.date]})]},image.identifier);})})]});}export default EPICImages;","map":{"version":3,"names":["React","useEffect","useState","Navbar","jsx","_jsx","jsxs","_jsxs","EPICImages","epicImages","setEpicImages","loading","setLoading","error","setError","fetchEPICImages","response","fetch","data","json","console","log","Array","isArray","className","children","message","map","image","dateParts","date","split","year","month","day","src","alt","caption","identifier"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/EPICImages.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Include the Navbar\nimport './EPICImages.css'; // Ensure you have the EPIC Images styles\n\nfunction EPICImages() {\n  const [epicImages, setEpicImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch EPIC images from the API\n  const fetchEPICImages = async () => {\n    setLoading(true); // Set loading state before fetching\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json(); // Parse the response as JSON\n      console.log('EPIC Images Data:', data); // Log the fetched data\n\n      if (data && Array.isArray(data)) {\n        setEpicImages(data); // Set the state to the array of images\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty if unexpected structure\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error); // Log any errors\n      setError(error); // Set the error state\n    } finally {\n      setLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  // Call the fetch function when the component mounts\n  useEffect(() => {\n    fetchEPICImages(); // Call the function to fetch EPIC images\n  }, []);\n\n  return (\n    <div className=\"epic-images-container\">\n      <Navbar /> {/* Include the Navbar */}\n\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      <h1>EPIC Images</h1>\n      <div className=\"epic-images-grid\">\n        {epicImages.map((image) => {\n          // Extracting date parts (year, month, day)\n          const dateParts = image.date.split(' ')[0].split('-');\n          const [year, month, day] = dateParts;\n\n          return (\n            <div key={image.identifier} className=\"epic-image-item\">\n              <img\n                src={`https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/jpg/${image.image}.jpg`}\n                alt={image.caption}\n                className=\"epic-image\"\n              />\n              <p>{image.caption}</p>\n              <p><strong>Date:</strong> {image.date}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default EPICImages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}