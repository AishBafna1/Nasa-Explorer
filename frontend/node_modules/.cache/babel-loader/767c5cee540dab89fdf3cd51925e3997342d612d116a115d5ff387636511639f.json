{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [apodData, setApodData] = useState(null);\n  const [epicImages, setEpicImages] = useState([]);\n  const [neoData, setNeoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch APOD data\n  const fetchApodData = async () => {\n    try {\n      const response = await fetch('/api/apod');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setApodData(data);\n    } catch (error) {\n      console.error('Error fetching APOD data:', error);\n      setError(error);\n    }\n  };\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    try {\n      const response = await fetch('/api/epic');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('EPIC Images Data:', data);\n      if (data && Array.isArray(data)) {\n        setEpicImages(data);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]);\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error);\n      setError(error);\n    }\n  };\n\n  // Fetch NeoWs data\n  const fetchNeoData = async () => {\n    try {\n      const response = await fetch('/api/neo');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setNeoData(data.near_earth_objects);\n    } catch (error) {\n      console.error('Error fetching Neo data:', error);\n      setError(error);\n    }\n  };\n\n  // Call all fetch functions when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    fetchApodData();\n    fetchEpicImages();\n    fetchNeoData();\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NASA Data Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), apodData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"apod-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: apodData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: apodData.url,\n        alt: \"APOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: apodData.explanation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Earth Polychromatic Imaging Camera (EPIC) Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), epicImages.length > 0 ? epicImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://epic.gsfc.nasa.gov/archive/natural/${image.date.split(' ')[0]}/jpg/${image.image}.jpg`,\n          alt: `EPIC ${image.identifier}`,\n          style: {\n            width: '100%',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: image.caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, image.identifier, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No EPIC images available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"neo-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Near Earth Objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), neoData.length > 0 ? neoData.map(neo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 18\n          }, this), \" \", neo.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, neo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Near Earth Objects available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j3vBxPvHMLUIeWn+Rp5UQCB/63o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","apodData","setApodData","epicImages","setEpicImages","neoData","setNeoData","loading","setLoading","error","setError","fetchApodData","response","fetch","ok","Error","data","json","console","fetchEpicImages","log","Array","isArray","fetchNeoData","near_earth_objects","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","title","src","url","alt","explanation","length","map","image","date","split","identifier","style","width","height","caption","neo","name","id","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [apodData, setApodData] = useState(null);\n  const [epicImages, setEpicImages] = useState([]);\n  const [neoData, setNeoData] = useState([]);\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch APOD data\n  const fetchApodData = async () => {\n    try {\n      const response = await fetch('/api/apod');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setApodData(data);\n    } catch (error) {\n      console.error('Error fetching APOD data:', error);\n      setError(error);\n    }\n  };\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    try {\n      const response = await fetch('/api/epic');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('EPIC Images Data:', data);\n      if (data && Array.isArray(data)) {\n        setEpicImages(data);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]);\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error);\n      setError(error);\n    }\n  };\n\n  // Fetch NeoWs data\n  const fetchNeoData = async () => {\n    try {\n      const response = await fetch('/api/neo');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setNeoData(data.near_earth_objects);\n    } catch (error) {\n      console.error('Error fetching Neo data:', error);\n      setError(error);\n    }\n  };\n\n  // Call all fetch functions when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    fetchApodData();\n    fetchEpicImages();\n    fetchNeoData();\n    setLoading(false);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>NASA Data Explorer</h1>\n\n      {loading && <div className=\"spinner\">Loading...</div>}\n\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      {/* APOD Section */}\n      {apodData && (\n        <div className=\"apod-container\">\n          <h2>{apodData.title}</h2>\n          <img src={apodData.url} alt=\"APOD\" />\n          <p>{apodData.explanation}</p>\n        </div>\n      )}\n\n      {/* EPIC Images Section */}\n      <div className=\"epic-images\">\n        <h2>Earth Polychromatic Imaging Camera (EPIC) Images</h2>\n        {epicImages.length > 0 ? (\n          epicImages.map((image) => (\n            <div key={image.identifier}>\n              <img \n                src={`https://epic.gsfc.nasa.gov/archive/natural/${image.date.split(' ')[0]}/jpg/${image.image}.jpg`} \n                alt={`EPIC ${image.identifier}`} \n                style={{ width: '100%', height: 'auto' }} \n              />\n              <p>{image.caption}</p>\n            </div>\n          ))\n        ) : (\n          <p>No EPIC images available.</p>\n        )}\n      </div>\n\n      {/* Near Earth Objects Section */}\n      <div className=\"neo-data\">\n        <h2>Near Earth Objects</h2>\n        {neoData.length > 0 ? (\n          neoData.map((neo) => (\n            <div key={neo.id}>\n              <p><strong>Name:</strong> {neo.name}</p>\n            </div>\n          ))\n        ) : (\n          <p>No Near Earth Objects available.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}