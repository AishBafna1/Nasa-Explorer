{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/NeoWs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Ensure the path is correct\nimport './NeoWs.css'; // Ensure you have your NEO styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeoWs() {\n  _s();\n  const [neoData, setNeoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [images, setImages] = useState({}); // State for images\n\n  // Fetch Near Earth Objects data from the API\n  const fetchNeoData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/neo'); // Fetch data from your backend\n      const data = await response.json();\n      if (data && data.near_earth_objects) {\n        setNeoData(data.near_earth_objects); // Set the state to the array of NEOs\n        // Fetch images for each NEO\n        await fetchImagesForNEOs(data.near_earth_objects);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setNeoData([]); // Clear NEO data if the structure is unexpected\n      }\n    } catch (error) {\n      console.error('Error fetching NEO data:', error);\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch images related to NEOs\n  const fetchImagesForNEOs = async neos => {\n    const imagePromises = neos.map(async neo => {\n      const query = encodeURIComponent(neo.name);\n      const response = await fetch(`/api/nasa-library?q=${query}`);\n      const data = await response.json();\n      if (data.collection && data.collection.items.length > 0) {\n        return {\n          id: neo.id,\n          imageUrl: data.collection.items[0].links[0].href\n        }; // Return the first image URL\n      }\n      return {\n        id: neo.id,\n        imageUrl: null\n      }; // No image found\n    });\n    const results = await Promise.all(imagePromises);\n    const imagesMap = {};\n    results.forEach(result => {\n      imagesMap[result.id] = result.imageUrl; // Map NEO ID to its image\n    });\n    setImages(imagesMap); // Update state with fetched images\n  };\n  useEffect(() => {\n    fetchNeoData(); // Call the function to fetch NEO data\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"neo-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Near Earth Objects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"neo-list\",\n      children: neoData.map(neo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neo-item\",\n        children: [images[neo.id] && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[neo.id],\n          alt: neo.name,\n          className: \"neo-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: neo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Estimated Diameter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 16\n          }, this), \" \", neo.estimated_diameter.meters.estimated_diameter_max.toFixed(2), \" m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Close Approach Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 16\n          }, this), \" \", neo.close_approach_data[0].close_approach_date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Miss Distance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 16\n          }, this), \" \", neo.close_approach_data[0].miss_distance.kilometers, \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, neo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(NeoWs, \"cl9yLazcu87RZ1RS5I5uPr+pU5Q=\");\n_c = NeoWs;\nexport default NeoWs;\nvar _c;\n$RefreshReg$(_c, \"NeoWs\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","jsxDEV","_jsxDEV","NeoWs","_s","neoData","setNeoData","loading","setLoading","error","setError","images","setImages","fetchNeoData","response","fetch","data","json","near_earth_objects","fetchImagesForNEOs","console","neos","imagePromises","map","neo","query","encodeURIComponent","name","collection","items","length","id","imageUrl","links","href","results","Promise","all","imagesMap","forEach","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","src","alt","estimated_diameter","meters","estimated_diameter_max","toFixed","close_approach_data","close_approach_date","miss_distance","kilometers","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/NeoWs.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Ensure the path is correct\nimport './NeoWs.css'; // Ensure you have your NEO styles\n\nfunction NeoWs() {\n  const [neoData, setNeoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [images, setImages] = useState({}); // State for images\n\n  // Fetch Near Earth Objects data from the API\n  const fetchNeoData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/neo'); // Fetch data from your backend\n      const data = await response.json();\n\n      if (data && data.near_earth_objects) {\n        setNeoData(data.near_earth_objects); // Set the state to the array of NEOs\n        // Fetch images for each NEO\n        await fetchImagesForNEOs(data.near_earth_objects);\n      } else {\n        console.error('Unexpected data structure:', data);\n        setNeoData([]); // Clear NEO data if the structure is unexpected\n      }\n    } catch (error) {\n      console.error('Error fetching NEO data:', error);\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch images related to NEOs\n  const fetchImagesForNEOs = async (neos) => {\n    const imagePromises = neos.map(async (neo) => {\n      const query = encodeURIComponent(neo.name);\n      const response = await fetch(`/api/nasa-library?q=${query}`);\n      const data = await response.json();\n      if (data.collection && data.collection.items.length > 0) {\n        return { id: neo.id, imageUrl: data.collection.items[0].links[0].href }; // Return the first image URL\n      }\n      return { id: neo.id, imageUrl: null }; // No image found\n    });\n\n    const results = await Promise.all(imagePromises);\n    const imagesMap = {};\n    results.forEach(result => {\n      imagesMap[result.id] = result.imageUrl; // Map NEO ID to its image\n    });\n    setImages(imagesMap); // Update state with fetched images\n  };\n\n  useEffect(() => {\n    fetchNeoData(); // Call the function to fetch NEO data\n  }, []);\n\n  return (\n    <div className=\"neo-container\">\n      <Navbar /> {/* Include the Navbar */}\n\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      <h1>Near Earth Objects</h1>\n      <div className=\"neo-list\">\n        {neoData.map((neo) => (\n          <div key={neo.id} className=\"neo-item\">\n            {images[neo.id] && (\n              <img \n                src={images[neo.id]} \n                alt={neo.name} \n                className=\"neo-image\" \n              />\n            )}\n            <h2>{neo.name}</h2>\n            <p><strong>Estimated Diameter:</strong> {neo.estimated_diameter.meters.estimated_diameter_max.toFixed(2)} m</p>\n            <p><strong>Close Approach Date:</strong> {neo.close_approach_data[0].close_approach_date}</p>\n            <p><strong>Miss Distance:</strong> {neo.close_approach_data[0].miss_distance.kilometers} km</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default NeoWs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}