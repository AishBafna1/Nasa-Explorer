{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/APOD.js\",\n  _s = $RefreshSig$();\n// src/pages/APOD.js\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Ensure the path is correct\nimport './APOD.css'; // Ensure you have your APOD styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction APOD() {\n  _s();\n  const [apodData, setApodData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(''); // State for selected date\n\n  // Function to fetch APOD data\n  const fetchAPOD = async date => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/apod?date=${date}`);\n      const data = await response.json();\n      setApodData(data);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Effect to fetch APOD when the component mounts or when selectedDate changes\n  useEffect(() => {\n    if (selectedDate) {\n      fetchAPOD(selectedDate);\n    } else {\n      fetchAPOD(new Date().toISOString().split('T')[0]); // Default to today's date\n    }\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"apod-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"apod-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: (apodData === null || apodData === void 0 ? void 0 : apodData.title) || 'Astronomy Picture of the Day'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate,\n        onChange: e => setSelectedDate(e.target.value) // Update selected date\n        ,\n        style: {\n          margin: '20px 0',\n          padding: '10px',\n          fontSize: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-wrapper\",\n        children: apodData && apodData.media_type === 'image' ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: apodData.url,\n          alt: apodData.title,\n          className: \"apod-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this) : apodData && /*#__PURE__*/_jsxDEV(\"iframe\", {\n          title: \"APOD Video\",\n          src: apodData.url,\n          className: \"apod-video\",\n          frameBorder: \"0\",\n          allow: \"autoplay; encrypted-media\",\n          allowFullScreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: apodData === null || apodData === void 0 ? void 0 : apodData.explanation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"date\",\n        children: [\"Date: \", apodData === null || apodData === void 0 ? void 0 : apodData.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(APOD, \"2tBvReFsHmA1YAKIcTllZxJmQBs=\");\n_c = APOD;\nexport default APOD;\nvar _c;\n$RefreshReg$(_c, \"APOD\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","jsxDEV","_jsxDEV","APOD","_s","apodData","setApodData","loading","setLoading","error","setError","selectedDate","setSelectedDate","fetchAPOD","date","response","fetch","data","json","Date","toISOString","split","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","title","type","value","onChange","e","target","style","margin","padding","fontSize","media_type","src","url","alt","frameBorder","allow","allowFullScreen","explanation","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/APOD.js"],"sourcesContent":["// src/pages/APOD.js\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../components/Navbar'; // Ensure the path is correct\nimport './APOD.css'; // Ensure you have your APOD styles\n\nfunction APOD() {\n    const [apodData, setApodData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedDate, setSelectedDate] = useState(''); // State for selected date\n\n    // Function to fetch APOD data\n    const fetchAPOD = async (date) => {\n        setLoading(true);\n        try {\n            const response = await fetch(`/api/apod?date=${date}`);\n            const data = await response.json();\n            setApodData(data);\n        } catch (error) {\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Effect to fetch APOD when the component mounts or when selectedDate changes\n    useEffect(() => {\n        if (selectedDate) {\n            fetchAPOD(selectedDate);\n        } else {\n            fetchAPOD(new Date().toISOString().split('T')[0]); // Default to today's date\n        }\n    }, [selectedDate]);\n\n    return (\n        <div className=\"apod-container\">\n            <Navbar /> {/* Include the Navbar */}\n            \n            {loading && <div className=\"spinner\">Loading...</div>}\n            {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n            \n            <div className=\"apod-content\">\n                <h1>{apodData?.title || 'Astronomy Picture of the Day'}</h1>\n                \n                {/* Date selection */}\n                <input\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)} // Update selected date\n                    style={{ margin: '20px 0', padding: '10px', fontSize: '1rem' }}\n                />\n\n                <div className=\"media-wrapper\">\n                    {/* Conditional rendering based on media type */}\n                    {apodData && apodData.media_type === 'image' ? (\n                        <img src={apodData.url} alt={apodData.title} className=\"apod-image\" />\n                    ) : (\n                        apodData && (\n                            <iframe\n                                title=\"APOD Video\"\n                                src={apodData.url}\n                                className=\"apod-video\"\n                                frameBorder=\"0\"\n                                allow=\"autoplay; encrypted-media\"\n                                allowFullScreen\n                            />\n                        )\n                    )}\n                </div>\n\n                <p className=\"description\">{apodData?.explanation}</p>\n                <p className=\"date\">Date: {apodData?.date}</p> {/* Display the date */}\n            </div>\n        </div>\n    );\n}\n\nexport default APOD;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}