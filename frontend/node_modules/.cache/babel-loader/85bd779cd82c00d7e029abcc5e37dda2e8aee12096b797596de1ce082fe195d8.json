{"ast":null,"code":"const express = require('express');\nconst axios = require('axios');\nconst cors = require('cors');\nconst app = express();\nconst port = 5000;\n\n// Replace with your actual NASA API key\nconst NASA_API_KEY = 'xiu4zVIwwaXesK3Jqr0agtqU1Rh1MnlC7irYliQ9';\napp.use(cors()); // Enable CORS\n\n// Route to fetch NASA Astronomy Picture of the Day (APOD)\napp.get('/api/apod', async (req, res) => {\n  try {\n    const response = await axios.get(`https://api.nasa.gov/planetary/apod?api_key=${NASA_API_KEY}`);\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching APOD data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch APOD data'\n    });\n  }\n});\n\n// Route to fetch Mars Rover Photos\napp.get('/api/mars-photos', async (req, res) => {\n  const {\n    sol = 1000,\n    camera = 'ALL'\n  } = req.query; // Default values\n  try {\n    const response = await axios.get(`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=${sol}&camera=${camera}&api_key=${NASA_API_KEY}`);\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching Mars Rover photos:', error);\n    res.status(500).json({\n      error: 'Failed to fetch Mars Rover photos'\n    });\n  }\n});\n\n// Route to fetch Earth Polychromatic Imaging Camera (EPIC) images\napp.get('/api/epic', async (req, res) => {\n  try {\n    const response = await axios.get(`https://api.nasa.gov/EPIC/api/natural/images?api_key=${NASA_API_KEY}`);\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching EPIC images:', error);\n    res.status(500).json({\n      error: 'Failed to fetch EPIC images'\n    });\n  }\n});\n\n// Route to fetch Near Earth Object Web Service (NeoWs) data\napp.get('/api/neo', async (req, res) => {\n  try {\n    const response = await axios.get(`https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=${NASA_API_KEY}`);\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching NeoWs data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch NeoWs data'\n    });\n  }\n});\n\n// Route to fetch NASA Image and Video Library\napp.get('/api/nasa-library', async (req, res) => {\n  try {\n    const response = await axios.get(`https://images-api.nasa.gov/search?media_type=image&api_key=${NASA_API_KEY}`);\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching NASA library data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch NASA library data'\n    });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","axios","cors","app","port","NASA_API_KEY","use","get","req","res","response","json","data","error","console","status","sol","camera","query","listen","log"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst axios = require('axios');\nconst cors = require('cors');\n\nconst app = express();\nconst port = 5000;\n\n// Replace with your actual NASA API key\nconst NASA_API_KEY = 'xiu4zVIwwaXesK3Jqr0agtqU1Rh1MnlC7irYliQ9';\n\napp.use(cors()); // Enable CORS\n\n// Route to fetch NASA Astronomy Picture of the Day (APOD)\napp.get('/api/apod', async (req, res) => {\n  try {\n    const response = await axios.get(\n      `https://api.nasa.gov/planetary/apod?api_key=${NASA_API_KEY}`\n    );\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching APOD data:', error);\n    res.status(500).json({ error: 'Failed to fetch APOD data' });\n  }\n});\n\n// Route to fetch Mars Rover Photos\napp.get('/api/mars-photos', async (req, res) => {\n  const { sol = 1000, camera = 'ALL' } = req.query; // Default values\n  try {\n    const response = await axios.get(\n      `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=${sol}&camera=${camera}&api_key=${NASA_API_KEY}`\n    );\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching Mars Rover photos:', error);\n    res.status(500).json({ error: 'Failed to fetch Mars Rover photos' });\n  }\n});\n\n// Route to fetch Earth Polychromatic Imaging Camera (EPIC) images\napp.get('/api/epic', async (req, res) => {\n  try {\n    const response = await axios.get(\n      `https://api.nasa.gov/EPIC/api/natural/images?api_key=${NASA_API_KEY}`\n    );\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching EPIC images:', error);\n    res.status(500).json({ error: 'Failed to fetch EPIC images' });\n  }\n});\n\n// Route to fetch Near Earth Object Web Service (NeoWs) data\napp.get('/api/neo', async (req, res) => {\n  try {\n    const response = await axios.get(\n      `https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=${NASA_API_KEY}`\n    );\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching NeoWs data:', error);\n    res.status(500).json({ error: 'Failed to fetch NeoWs data' });\n  }\n});\n\n// Route to fetch NASA Image and Video Library\napp.get('/api/nasa-library', async (req, res) => {\n  try {\n    const response = await axios.get(\n      `https://images-api.nasa.gov/search?media_type=image&api_key=${NASA_API_KEY}`\n    );\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error fetching NASA library data:', error);\n    res.status(500).json({ error: 'Failed to fetch NASA library data' });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}