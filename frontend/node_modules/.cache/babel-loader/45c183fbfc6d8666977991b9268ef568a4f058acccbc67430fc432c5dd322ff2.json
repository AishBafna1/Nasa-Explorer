{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [apodData, setApodData] = useState(null);\n  const [marsPhotos, setMarsPhotos] = useState([]);\n  const [epicImages, setEpicImages] = useState([]);\n  const [neoData, setNeoData] = useState([]);\n  const [nasaLibrary, setNasaLibrary] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sol, setSol] = useState(1000); // Default Martian day\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json(); // Parse the response as JSON\n      console.log('EPIC Images Data:', data); // Log the fetched data to the console\n\n      // Adjust according to the actual response structure\n      if (data && Array.isArray(data.data)) {\n        setEpicImages(data.data); // Set the state to the array of images\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty if unexpected structure\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error); // Log any errors\n      setError(error); // Set the error state\n    }\n  };\n\n  // Call the fetch functions when the component mounts\n  useEffect(() => {\n    fetchEpicImages(); // Call the function to fetch EPIC images\n    // Add other fetch functions here...\n  }, [sol]); // Make sure to include sol if you want to refetch when it changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NASA Data Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Earth Polychromatic Imaging Camera (EPIC) Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), epicImages.length > 0 ? epicImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://epic.gsfc.nasa.gov/archive/natural/${image.date}/jpg/${image.image}.jpg`,\n          alt: `EPIC ${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No EPIC images available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RmTtdlI2y7MNjicKGeHko2tBZyM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","apodData","setApodData","marsPhotos","setMarsPhotos","epicImages","setEpicImages","neoData","setNeoData","nasaLibrary","setNasaLibrary","loading","setLoading","error","setError","sol","setSol","fetchEpicImages","response","fetch","data","json","console","log","Array","isArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","length","map","image","index","src","date","alt","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [apodData, setApodData] = useState(null);\n  const [marsPhotos, setMarsPhotos] = useState([]);\n  const [epicImages, setEpicImages] = useState([]);\n  const [neoData, setNeoData] = useState([]);\n  const [nasaLibrary, setNasaLibrary] = useState([]);\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sol, setSol] = useState(1000); // Default Martian day\n\n  // Fetch EPIC images\n  const fetchEpicImages = async () => {\n    try {\n      const response = await fetch('/api/epic'); // Fetch data from your backend\n      const data = await response.json(); // Parse the response as JSON\n      console.log('EPIC Images Data:', data); // Log the fetched data to the console\n      \n      // Adjust according to the actual response structure\n      if (data && Array.isArray(data.data)) {\n        setEpicImages(data.data); // Set the state to the array of images\n      } else {\n        console.error('Unexpected data structure:', data);\n        setEpicImages([]); // Set to empty if unexpected structure\n      }\n    } catch (error) {\n      console.error('Error fetching EPIC images:', error); // Log any errors\n      setError(error); // Set the error state\n    }\n  };\n\n  // Call the fetch functions when the component mounts\n  useEffect(() => {\n    fetchEpicImages(); // Call the function to fetch EPIC images\n    // Add other fetch functions here...\n  }, [sol]); // Make sure to include sol if you want to refetch when it changes\n\n  return (\n    <div className=\"App\">\n      <h1>NASA Data Explorer</h1>\n      \n      {/* Display loading indicator */}\n      {loading && <div className=\"spinner\">Loading...</div>}\n      \n      {/* Display error message if there is an error */}\n      {error && <p className=\"error\">Error fetching data: {error.message}</p>}\n\n      {/* EPIC Images Section */}\n      <div className=\"epic-images\">\n        <h2>Earth Polychromatic Imaging Camera (EPIC) Images</h2>\n        {epicImages.length > 0 ? (\n          epicImages.map((image, index) => (\n            <div key={index}>\n              <img \n                src={`https://epic.gsfc.nasa.gov/archive/natural/${image.date}/jpg/${image.image}.jpg`} \n                alt={`EPIC ${index}`} \n              />\n            </div>\n          ))\n        ) : (\n          <p>No EPIC images available.</p>\n        )}\n      </div>\n\n      {/* Other sections... */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}