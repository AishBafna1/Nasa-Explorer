{"ast":null,"code":"var _jsxFileName = \"/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/APOD.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction APOD() {\n  _s();\n  const [apodData, setApodData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]); // Default to today's date\n\n  // Fetch APOD data based on selected date\n  const fetchAPOD = async selectedDate => {\n    setLoading(true); // Set loading state\n    try {\n      const response = await fetch(`/api/apod?date=${selectedDate}`); // Fetch data from your backend\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json(); // Parse the response as JSON\n      console.log('Fetched APOD Data:', data); // Log the fetched data to the console\n      setApodData(data); // Store the fetched data\n    } catch (error) {\n      console.error('Error fetching APOD data:', error);\n      setError(error); // Set error state\n    } finally {\n      setLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  // Call fetchAPOD when the component mounts or the date changes\n  useEffect(() => {\n    fetchAPOD(date); // Fetch APOD for the selected date\n  }, [date]); // Fetch whenever date changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Astronomy Picture of the Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: date,\n      onChange: e => setDate(e.target.value) // Update the date when the user selects a new one\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), apodData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: apodData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), apodData.media_type === 'video' ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: \"APOD Video\",\n        src: apodData.url,\n        width: \"600\",\n        height: \"400\",\n        frameBorder: \"0\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: apodData.url,\n        alt: apodData.title,\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: apodData.explanation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 14\n        }, this), \" \", apodData.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(APOD, \"88oWgPwRT2eWxP5OE+SFiMFlwDI=\");\n_c = APOD;\nexport default APOD;\nvar _c;\n$RefreshReg$(_c, \"APOD\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","APOD","_s","apodData","setApodData","loading","setLoading","error","setError","date","setDate","Date","toISOString","split","fetchAPOD","selectedDate","response","fetch","ok","Error","data","json","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","message","title","media_type","src","url","width","height","frameBorder","allowFullScreen","alt","style","maxWidth","explanation","_c","$RefreshReg$"],"sources":["/Users/buffu/Desktop/nasa-explorer/frontend/src/pages/APOD.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction APOD() {\n  const [apodData, setApodData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]); // Default to today's date\n\n  // Fetch APOD data based on selected date\n  const fetchAPOD = async (selectedDate) => {\n    setLoading(true); // Set loading state\n    try {\n      const response = await fetch(`/api/apod?date=${selectedDate}`); // Fetch data from your backend\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json(); // Parse the response as JSON\n      console.log('Fetched APOD Data:', data); // Log the fetched data to the console\n      setApodData(data); // Store the fetched data\n    } catch (error) {\n      console.error('Error fetching APOD data:', error);\n      setError(error); // Set error state\n    } finally {\n      setLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  // Call fetchAPOD when the component mounts or the date changes\n  useEffect(() => {\n    fetchAPOD(date); // Fetch APOD for the selected date\n  }, [date]); // Fetch whenever date changes\n\n  return (\n    <div>\n      <h2>Astronomy Picture of the Day</h2>\n      <input\n        type=\"date\"\n        value={date}\n        onChange={(e) => setDate(e.target.value)} // Update the date when the user selects a new one\n      />\n      {loading && <div>Loading...</div>}\n      {error && <p>Error fetching data: {error.message}</p>}\n      {apodData && (\n        <div>\n          <h3>{apodData.title}</h3>\n          {apodData.media_type === 'video' ? (\n            <iframe\n              title=\"APOD Video\"\n              src={apodData.url}\n              width=\"600\"\n              height=\"400\"\n              frameBorder=\"0\"\n              allowFullScreen\n            ></iframe>\n          ) : (\n            <img src={apodData.url} alt={apodData.title} style={{ maxWidth: '100%' }} />\n          )}\n          <p>{apodData.explanation}</p>\n          <p><strong>Date:</strong> {apodData.date}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default APOD;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}